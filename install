echo "deb https://http.kali.org/kali kali-rolling main non-free contrib" > /etc/apt/sources.list
#Reset          - 0 - Back to normal (remove all styles)
#Bold           - 1  - Bold the text
#Underline      - 4  - Underline text
#Inverse        - 7  - Interchange colors of background and foreground
#Bold off       - 21 - Normal from bold
#Underline off  - 24 - Normal from Underline
#Inverse off    - 27 - Reverse of the Inverse

#===================
#    COLOUR CODE   |
#===================
fdf='\033[39m'
bdf='\033[49m'

bld='\033[1m'
und='\033[4m'
int='\033[7m'

wog='\033[100m'

off='\033[0m'

blr='\033[101m'

blg='\033[102m'

byl='\033[103m'

blb='\033[104m'

blp='\033[105m'

btl='\033[106m'

bwt='\033[107m'

fbk='\033[30m'
bbk='\033[40m'

frd='\033[31m'
brd='\033[41m'

fgr='\033[32m'
bgr='\033[42m'

fyl='\033[33m'
byl='\033[43m'

fbl='\033[34m'
bbl='\033[44m'

fmg='\033[35m'
bmg='\033[45m'

fcy='\033[36m'
bcy='\033[46m'

fwt='\033[37m'
bwh='\033[47m'


clear

#===================
#   REQURIEMENTS   |
#===================
dir=$HOME/.temp
if [ ! -d $dir ]
then
mkdir $dir
fi

#=================
#  AUTO UPGRADE  |
#=================
if [ -f $dir/edate ]
then
edate=`cat $dir/edate`
else
edate=' '
fi

cdate=`date +%F`
#echo $cdate
#echo $edate

if [ "$edate" != "$cdate" ]
then
apt update && apt upgrade -y && apt autoremove -y
fi


#======================
#    PATH SPLITTING   |
#======================
while IFS= read -d ':' t
do
	path[$i]=`echo $t | grep 'bin'`
#	echo ${path[$i]}
((i++))
done <<< $PATH


#====================== 
#   CHECK EXISTANCE   |
#======================
ch_i(){
flag=0

for i in ${path[*]}
do
#	echo $i
	if [ -f $i/$1 ]
	then
		flag=1
		break
	fi
done

if ((flag==0))
then
	apt install -y $1
fi

return $flag
}

check(){

for i in $@
do
ch_i $i
done

}

#=====================
#  OS ARCHITECTURE   |
#=====================
OS(){

check neofetch
os=`neofetch --ascii_distro distro | cut -d ' ' -f2`
#echo $os
neofetch --stdout
echo -e "\n"
}



#=========
# ENDING |
#=========

end(){
echo $cdate > $dir/edate
exit
}

#=================
#  MENU PORTION  |
#=================
menu(){

echo -e "===============> <================"
echo -e "||   [>>]   M  E  N  U  [<<]    ||"
echo -e "===============> <================"
echo -e "||       BY  RAJDEEP BASU       ||"
echo -e "=================================="
echo -e "||  [1] BASIC REQUIREMENTS      ||"
echo -e "||  [2] PIP REQUIREMENTS        ||"
echo -e "||  [3] NMAP                    ||"
echo -e "||  [4] METASPLOIT              ||"
echo -e "||  [5] SQLMAP                  ||"
echo -e "||  [6] WEEVELY                 ||"
echo -e "||  [7] NGROK & SERVERS         ||"
echo -e "||  [8] WIRESHARK               ||"
echo -e "||  [9] CODELITE                ||"
echo -e "|| [10] SLOWLORIS               ||"
echo -e "|| [11] DARK-FLY                ||"
echo -e "|| [12] TOOL_X                  ||"
echo -e "|| [13] CALCULATOR              ||"
echo -e "||  [0] EXIT                    ||"
echo -e "=================================="


}

#======================
#  BASIC REQUIREMENTS |
#======================
breq(){

check software-properties-common snapd espeak x265 x264 science-repo 
check python python2 python3 python3-pip clang php perl ruby g++ ruby-dev php-dev 
check git wget curl w3m firefox-esr sed tor awk finger 
check emacs neovim nano gedit vim bluefish kate vim-gtk  
check zip gzip bzip2 p7zip unzip unrar tar
check mtools tmux tmate debianutils nodejs
check cowsay sl figlet toilet fish 
check sslscan sslyze
curl -sSL https://raw.githubusercontent.com/sundowndev/phoneinfoga/master/support/scripts/install | bash
# Check the binary
./phoneinfoga version
# You can also install it globally
sudo mv ./phoneinfoga /usr/bin/phoneinfoga

if [ "$os" = Android ]
then
	check x11-repo root-repo unstable-repo
	check termux-api termux-auth termux-am termux-apt-repo
	check termux-create package termux-elf-cleaner
	check termux-tools termux-services

fi

 
}

#=====================
#  PIP REQUIREMENTS  |
#=====================
preq(){
	pip install requests
	pip install wheel auxlib
        pip install bs4 beautifulsoup4
}

#=================
#    EXECUTION   |
#=================
exe(){
echo -e "[>] ENTER YOUR CHOICE : \c"
read choice

case $choice in

0)
end

;;

1)
breq
;;

2)
preq
;;

3)
check pip pip2 pip3 python3-pip

if [ "$os" = Kali ]
then
        check nmap
else
pip install nmap
fi

;;

4)
if [ "$os" = Kali ]
then
	check metasploit-framework
else
	cd $HOME
	curl https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb > msfinstall
	chmod 755 msfinstall
	./msfinstall
fi
;;

5)
check pip pip2 pip3 python3-pip
if [ "$os" = Kali ]
then
	check sqlmap
else
	check sqlmap 
	if [ $flag -eq 0 ]
	then
		pip install sqlmap
	fi
fi

;;

6)
if [ "$os" = Kali ]
then
        check weevely
else
        cd $HOME
	git clone https://github.com/17ack312/weevely.git
fi
;;


7)
check apache2 apache2-dev mariadb nginx openssh 
cd $dir
wget "https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-linux-s390x.tgz"
tar xvzf ~/Downloads/ngrok-v3-stable-linux-amd64.tgz -C /usr/local/bin 

ngrok authtoken 1rOqHSrv8ji0wZUE11sTQJURolp_7SstGrT7ao8TciaYhtT7x

;;

8)
check wireshark
;;

9)
check codelite
add-apt-repository ppa:eugenesan/ppa  
apt-get update  
apt-get install codelite -y  
;;

10)
check pip pip2 pip3 python3-pip
pip install slowloris

;;

11)
cd $dir
git clone https://github.com/Ranginang67/DarkFly-Tool
cd DarkFly-Tool/
chmod +x *
./install.py

;;

12) 
cd $dir
git clone https://github.com/Rajkumrdusad/Tool-X
cd Tool-X
chmod +x *
bash install
;;

13)
echo -e "COMING SOON"
;;

*) bash os;;
esac


}



#====================
#  RUN THE PROGRAM  |
#====================
OS
menu
exe


#====================
#   END OF PROGRAM  |
#====================





